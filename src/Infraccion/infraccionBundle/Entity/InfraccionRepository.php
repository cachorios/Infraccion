<?php

namespace Infraccion\infraccionBundle\Entity;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Query\ResultSetMapping;
USE Doctrine\ORM\Query\ResultSetMappingBuilder;


/**
 * InfraccionRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */

class InfraccionRepository extends EntityRepository
{
   public function getInfraccionByDatos($muni,$ubi,$tipoInf,$dom, $fecha){
        $reg = $this->findBy(array('municipio'=> $muni, 'ubicacion' => $ubi, "tipo_infraccion" => $tipoInf, "dominio" => $dom, "fecha" => $fecha ) );
        if(count($reg) >0 ){
            return $reg[0];
        }

       return null;
   }

    /**
     * @param $muni
     * @param $ubi
     * @param $tipo
     * @param Datetime $fecha
     * @return \Doctrine\ORM\QueryBuilder
     */
    public function getInfraccionQuery($muni, $ubi, $tipo,$fecha)
    {

        $fecha2 = clone($fecha);
        $a = $this->createQueryBuilder("r")
//            ->leftJoin("VerificacionBundle:Automotor","a",\Doctrine\ORM\Query\Expr\Join::LEFT_JOIN,"r.dominio = a.dominio")
            ->where("r.municipio = :muni")
            ->andWhere("r.ubicacion = :ubic")
            ->andWhere("r.tipo_infraccion = :tipo")
            ->andWhere("r.fecha between :fechaDesde and :fechaHasta")
            ->orderBy('r.fecha')
            ->setParameter("muni", $muni)
            ->setParameter("ubic", $ubi)
            ->setParameter("tipo", $tipo)
            ->setParameter("fechaDesde", $fecha->setTime(0,0))
            ->setParameter("fechaHasta", $fecha2->setTime(23,59) )
            ;
        return $a;
    }


    public function getInfraccionGroupQuery()
    {


        $sql = 'select      i.municipio_id,
                            m.nombre as municipio,
                            i.ubicacion_id,
                            u.referencia,
                            i.tipo_infraccion_id,
                            t.nombre,
                            cast(i.fecha as date) as fecha,
                            count(i.id) as reg
                from      infraccion i
                left join municipio m ON m.id = i.municipio_id
                left join tipoinfraccion t ON t.id = i.tipo_infraccion_id
                left join ubicacion u ON u.id = i.ubicacion_id
                group by  i.municipio_id, m.nombre,
                          i.ubicacion_id, u.referencia,
                          i.tipo_infraccion_id, t.nombre,
                          cast(i.fecha as date)
                order by cast(i.fecha as date) desc';


        $rsm = new ResultSetMapping;
        //$rsm->addEntityResult('InfraccionBundle:Infraccion', 'i');

        $rsm->addScalarResult('municipio_id', 'municipio_id', 'integer');
        $rsm->addScalarResult('municipio', 'municipio', 'string');
        $rsm->addScalarResult('ubicacion_id', 'ubicacion_id', 'integer');
        $rsm->addScalarResult('referencia', 'ubicacion', 'string');
        $rsm->addScalarResult('tipo_infraccion_id', 'tipo_infraccion_id',"integer");
        $rsm->addScalarResult('nombre', 'infraccion', 'string');
        $rsm->addScalarResult('fecha', 'fecha', 'date');
        $rsm->addScalarResult('reg', 'reg', 'integer');

        $query = $this->_em->createNativeQuery($sql, $rsm);

        return $query;

    }

    public function getInfraccionToCedula($muni, $desde, $hasta){
        $res = $this->_em->createQuery('
            SELECT  i
            FROM    InfraccionBundle:Infraccion i
            WHERE   i.municipio = :muni
            AND     i.fecha BETWEEN :desde AND :hasta
            AND     i.etapa = 1
            ORDER BY i.fecha')
            ->setParameter("muni",$muni)
            ->setParameter('desde',$desde->setTime(0,0))
            ->setParameter('hasta',$hasta->setTime(23,59))
            ->getResult();

        return $res;
    }

    public function getInfraccionToCedulaPrn($muni, $desde, $hasta){
        $res = $this->_em->createQuery("
            SELECT  i
            FROM    InfraccionBundle:Infraccion i
            WHERE   i.municipio = :muni
            AND     i.fecha BETWEEN :desde AND :hasta
            AND     i.etapa = 2
            ORDER BY i.fecha")
            ->setParameter("muni",$muni)
            ->setParameter('desde',$desde->setTime(0,0))
            ->setParameter('hasta',$hasta->setTime(23,59))
            ->getResult();

        return $res;
    }
}
